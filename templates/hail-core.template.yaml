AWSTemplateFormatVersion: "2010-09-09"
Description: "Hail S3, AMI, and Service Catalog Stacks (qs-1qp776mgg)"

Metadata:
  QuickStartDocumentation:
    EntrypointName: "Launch into an existing VPC"
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "AWS Quick Start Configuration"
        Parameters:
         - "QSS3BucketName"
         - "QSS3KeyPrefix"
      - Label:
          default: "Network Settings"
        Parameters:
          - "pVpcId"
          - "pSubnetId"
          - "pSubnetType"
      - Label:
          default: "Hail Settings"
        Parameters:
          - "pHailBucket"
          - "pCreateHailBucket"
          - "pSageMakerBucket"
          - "pCreateSageMakerBucket"
          - "pKmsEbsArn"
      - Label:
          default: "Tagging"
        Parameters:
          - "pTagEnvironment"
          - "pTagOwner"
    ParameterLabels:
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      pKmsEbsArn:
        default: "EBS KMS Key ARN"
      pHailBucket:
        default: "Hail Bucket Name"
      pCreateHailBucket:
        default: "Create Hail Bucket"
      pSageMakerBucket:
        default: "Sagemaker Home Directory Bucket Name"
      pCreateSageMakerBucket:
        default: "Create SageMaker Bucket"
      pTagOwner:
        default: "Owner Tag"
      pTagEnvironment:
        default: "Environment Tag"
      pVpcId:
        default: "Existing VPC ID"
      pSubnetId:
        default: "Existing Subnet ID"
      pSubnetType:
        default: "Existing Subnet Type"

Parameters:

  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Default: "aws-quickstart"
    Description: "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Type: "String"

  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    ConstraintDescription: "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Default: "quickstart-hail/"
    Description: "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Type: "String"

  pHailBucket:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    Description: "EMR logs, cluster manifests, and VEP configuration files are placed here."
    Type: "String"

  pCreateHailBucket:
    Type: "String"
    Description: "Select No to use an existing bucket."
    AllowedValues:
      - "yes"
      - "no"
    Default: "yes"

  pKmsEbsArn:
    Description: "Optional - if the source AMI is encrypted specify the full key ARN.  Otherwise, leave blank.  This does NOT automatically enable EBS encryption."
    Default: ""
    Type: "String"

  pSageMakerBucket:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    Description: "Bucket for common Jupyter notebooks and SageMaker home directory backups."
    Type: "String"

  pCreateSageMakerBucket:
    Type: "String"
    Description: "Select No to use an existing bucket."
    AllowedValues:
      - "yes"
      - "no"
    Default: "yes"

  pTagEnvironment:
    AllowedValues:
      - "production"
      - "staging"
      - "development"
    Default: "development"
    Description: "Environment type for default resource tagging."
    Type: "String"

  pTagOwner:
    Type: "String"
    Description: "Optional - Owner of the resources.  Person/Department, etc."
    Default: ""

  pSubnetId:
    Description: "Required for existing VPC target. Subnet for EMR Cluster and SageMaker Notebook Instances.  Must reside in the existing VPC."
    Type: "AWS::EC2::Subnet::Id"

  pSubnetType:
    Description: "Required for existing VPC target. Public subnets deploy resources with public IPs.  Private subnets do not.  Private subnets are recommended."
    Type: "String"
    AllowedValues:
      - "public"
      - "private"
    Default: "private"

  pVpcId:
    Description: "Required - SageMaker security group is created in this VPC."
    Type: "AWS::EC2::VPC::Id"

Resources:

  stackS3:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/hail-s3.template.yaml"
      Parameters:
        pHailBucket: !Ref pHailBucket
        pCreateHailBucket: !Ref pCreateHailBucket
        pSageMakerBucket: !Ref pSageMakerBucket
        pCreateSageMakerBucket: !Ref pCreateSageMakerBucket
        pTagEnvironment: !Ref pTagEnvironment
        pTagOwner: !Ref pTagOwner
      TimeoutInMinutes: 5

  stackAmi:
    DependsOn:
      - stackS3
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/hail-ami.template.yaml"
      Parameters:
        pKmsEbsArn: !Ref pKmsEbsArn
        pHailBucket: !Ref pHailBucket
        pRodaHailBucket: !GetAtt rodaBucketParameter.Value
        pSubnetId: !Ref pSubnetId
        pSubnetType: !Ref pSubnetType
        pVpcId: !Ref pVpcId
      TimeoutInMinutes: 5

  stackServiceCatalog:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/hail-service-catalog.yaml"
      Parameters:
        QSS3BucketName: !Ref QSS3BucketName
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
      TimeoutInMinutes: 5

  sgSagemaker:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref pVpcId
      GroupDescription: "Security group for SageMaker Notebook instances to connect to Hail clusters."
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
          CidrIp: "0.0.0.0/0"
          Description: "all"
      Tags:
        - Key: "environment"
          Value: !Ref pTagEnvironment
        - Key: "owner"
          Value: !Ref pTagOwner

  sagemakerSgParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Description: "Security Group ID to attach to Hail SageMaker notebook instances."
      Name: "/hail/sagemaker/security-group-id"
      Type: "String"
      Value: !Ref sgSagemaker

  subnetIdParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Description: "Target subnet for Hail EMR cluster and SageMaker notebook instances."
      Name: "/hail/vpc/subnet-id"
      Type: "String"
      Value: !Ref pSubnetId

  vpcIdParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Description: "Target VPC for Hail EMR cluster and SageMaker notebook instances."
      Name: "/hail/vpc/id"
      Type: "String"
      Value: !Ref pVpcId

  subnetTypeParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Description: "Subnet type, public or private, for Hail resources.  Drives SageMaker notebook networking configuration."
      Name: "/hail/vpc/subnet-type"
      Type: "String"
      Value: !Ref pSubnetType

  roleLambdaS3seed:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "cloudwatch-log-write"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Resource: "arn:aws:logs:*:*:*"
              Effect: "Allow"
        - PolicyName: "hail-sagemaker-s3-put-object"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Action:
                - "s3:PutObject"
              Resource:
                - !Sub "arn:aws:s3:::${pSageMakerBucket}/common-notebooks/*"
                - !Sub "arn:aws:s3:::${pSageMakerBucket}/scripts/*"
                - !Sub "arn:aws:s3:::${pHailBucket}/*"
              Effect: "Allow"
        - PolicyName: "s3-quickstart-list"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Action:
                - "s3:ListBucket"
              Resource:
                - !Sub "arn:aws:s3:::${QSS3BucketName}"
              Effect: "Allow"
        - PolicyName: "s3-quickstart-get-object"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Action:
                - "s3:GetObject"
              Resource:
                - !Sub "arn:aws:s3:::${QSS3BucketName}/*"
              Effect: "Allow"

  lambdaS3seed:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.lambda_handler"
      Role: !GetAtt roleLambdaS3seed.Arn
      Code:
        ZipFile: |
          import boto3
          import os
          import cfnresponse
          import shutil

          client = boto3.client("s3")
          s3_packer_dest = "ami/packer.zip"


          def s3_sync_buckets(source_bucket, dest_bucket, source_prefix, directory):
              for obj in client.list_objects_v2(
                  Bucket=source_bucket, Prefix=source_prefix + directory
              )["Contents"]:
                  source_file = obj["Key"]
                  # Omit "directories" from copy
                  if not source_file.endswith("/"):
                      dest_filename = os.path.split(source_file)[1]
                      print(
                          f"Copy s3://{source_bucket}/{source_file} => s3://{dest_bucket}/{directory}/{dest_filename}"
                      )
                      client.copy_object(
                          Bucket=dest_bucket,
                          Key=directory + "/" + dest_filename,
                          CopySource=source_bucket + "/" + source_file,
                      )


          def s3_sync_local(source_bucket, source_prefix, dest_directory):
              for obj in client.list_objects_v2(Bucket=source_bucket, Prefix=source_prefix)[
                  "Contents"
              ]:
                  source_file = obj["Key"]
                  if source_file.endswith("/"):
                      os.makedirs(f"{dest_directory}/{source_file}")
                  else:
                      local_dest_dir = f"{dest_directory}/{os.path.dirname(source_file)}"

                      if not os.path.exists(local_dest_dir):
                          os.makedirs(local_dest_dir)

                      print(
                          f"Copy s3://{source_bucket}/{source_file} => {dest_directory}/{source_file}"
                      )
                      client.download_file(
                          source_bucket, source_file, f"{dest_directory}/{source_file}"
                      )


          def lambda_handler(event, context):
              print(event)
              try:
                  source_bucket = event["ResourceProperties"]["QSS3BucketName"]
                  quickstart_prefix = event["ResourceProperties"]["QSS3KeyPrefix"]
                  hail_bucket = event["ResourceProperties"]["HailBucketName"]
                  sagemaker_bucket = event["ResourceProperties"]["SageMakerBucketName"]
                  sync_plan = [
                      {
                          "source_path": quickstart_prefix + "sagemaker/",
                          "sub_directories": ["scripts", "common-notebooks"],
                          "dest_bucket": sagemaker_bucket,
                      },
                      {
                          "source_path": quickstart_prefix,
                          "sub_directories": ["vep-configuration"],
                          "dest_bucket": hail_bucket,
                      },
                  ]

                  if event["RequestType"] in ["Create", "Update"]:

                      for obj in sync_plan:
                          for directory in obj["sub_directories"]:
                              s3_sync_buckets(
                                  source_bucket, obj["dest_bucket"], obj["source_path"], directory
                              )

                      # Copy quickstart packer directory to local file system.
                      packer_dir = f"/tmp/{quickstart_prefix}packer"
                      s3_sync_local(source_bucket, quickstart_prefix + "packer/", "/tmp")

                      # Zip and seed user's Hail bucket for custom AMI builds.
                      zip_name = shutil.make_archive("/tmp/packer", "zip", packer_dir)
                      f = open(zip_name, "rb")
                      zip_contents = f.read()
                      f.close()
                      client.put_object(Body=zip_contents, Bucket=hail_bucket, Key=s3_packer_dest)
                      print(f"Copy {zip_name} to s3://{hail_bucket}/{s3_packer_dest}")
                      shutil.rmtree(f"/tmp/{quickstart_prefix}")

                      rdata = {"Status": "SUCCESS"}
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, rdata)

                  elif event["RequestType"] == "Delete":

                      print("Delete Request by CFN...")
                      rdata = {"Status": "Success"}
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, rdata)

              except Exception as e:

                  print("[ERROR] - %s" % str(e))
                  rdata = {"Error": "Could not perform the operation"}
                  cfnresponse.send(event, context, cfnresponse.FAILED, rdata)

      Runtime: "python3.7"
      Timeout: 300

  lambdaS3seedPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "cloudformation.amazonaws.com"
      FunctionName: !GetAtt lambdaS3seed.Arn

  lambdaS3seedInvoke:
    Type: "Custom::InvokeLambdaFunction"
    Properties:
      QSS3BucketName: !Ref QSS3BucketName
      QSS3KeyPrefix: !Ref QSS3KeyPrefix
      HailBucketName: !Ref pHailBucket
      SageMakerBucketName: !Ref pSageMakerBucket
      ServiceToken: !GetAtt lambdaS3seed.Arn

  rodaBucketParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Description: "Registry of Open Data Hail S3 Bucket.  Contains VEP and LOFTEE data."
      Name: "/hail/s3/roda"
      Type: "String"
      Value: "hail-vep-pipeline"

Outputs:

  portfolio:
    Description: "Service Catalog Portfolio"
    Value: !GetAtt stackServiceCatalog.Outputs.portfolio

  bucketHail:
    Description: "Hail S3 Bucket"
    Value: !GetAtt stackS3.Outputs.bucketHail

  bucketSageMaker:
    Description: "SageMaker S3 Bucket"
    Value: !GetAtt stackS3.Outputs.bucketSageMaker

